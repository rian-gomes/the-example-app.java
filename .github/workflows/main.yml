name: Login na API, Armazenar Token e Verificar/Criar Aplicação

on:
  push:
    branches:
      - master

jobs:
  login_and_create_app:
    runs-on: ubuntu-latest

    env:
      API_EMAIL: ${{ secrets.API_EMAIL }}
      API_PASSWORD: ${{ secrets.API_PASSWORD }}
      API_TOKEN: ${{ secrets.API_TOKEN }}
      GH_TOKEN: ${{ secrets.GIT_TOKEN }}
      APP_NAME: "TESTE" # Definir o nome da aplicação como o nome do repositório GitHub
      TEAM_ID: 370

    steps:
    - name: Verificar código
      uses: actions/checkout@v2

    - name: Fazer login na API e armazenar token
      run: |
        # Faz o login na API usando as variáveis de ambiente API_EMAIL e API_PASSWORD
        response=$(curl -X 'POST' 'https://auth.development.xguardianplatform.io/login' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d '{
            "email": "'"${API_EMAIL}"'",
            "password": "'"${API_PASSWORD}"'"
          }' | jq -r '.token')

        # Verifica se o token foi obtido com sucesso
        if [ -n "$response" ] && [ "$response" != "null" ]; then
          # Armazena o token como um segredo no GitHub Actions usando echo e gh
          echo -n "$response" | gh secret set API_TOKEN
          echo "Token armazenado com sucesso."
        else
          echo "Erro: Não foi possível obter o token de autenticação."
          exit 1
        fi

    - name: Verificar e criar aplicação
      run: |
        CREATE_APP_URL="https://uploader-mvp.development.xguardianplatform.io/create_app"

        DATA='{
          "token": "'"${API_TOKEN}"'",
          "app_name": "'"${APP_NAME}"'",
          "team_id": "'"${TEAM_ID}"'",
          "languages": ["java"],
          "description": "string",
          "policy": 1
        }'

        RESPONSE=$(curl -sS -w "%{http_code}" -X POST "${CREATE_APP_URL}" \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -d "${DATA}")

        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)

        if [ "$HTTP_STATUS" == "200" ]; then
          echo "Aplicação criada com sucesso!"
        else
          # Extrair apenas o código de status HTTP (por exemplo, "400")
          HTTP_STATUS=${HTTP_STATUS%%[^0-9]*}
          echo "O código de status HTTP é $HTTP_STATUS."
          echo "A aplicação já existe ou ocorreu um erro desconhecido. Continuando o fluxo de trabalho."
        fi
