name: XGuardian SAST Scan

on:
  push:
    branches:
      - master

jobs:
  scan:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        lang: [python]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        run: |
          sudo apt-get install -y python3
          echo "python=python3" >> $GITHUB_ENV
          
      - name: Login to XGuardian
        run: |
          RESPONSE=$(curl -sS -X POST 'https://auth.xguardianplatform.io/login' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{
          "email": "${{ secrets.XGUARDIAN_EMAIL }}",
          "password": "${{ secrets.XGUARDIAN_PASSWORD }}"
          }')

          if [[ ! -z "$(echo "$RESPONSE" | jq -r '.error')" ]]; then
            echo "XGuardian API error: $(echo "$RESPONSE" | jq -r '.error')"
            exit 1
          fi

          TOKEN=$(echo "$RESPONSE" | jq -r '.token')
          echo "XGUARDIAN_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Create App
        run: |
          APP_ID=$(curl -sS -X POST 'https://uploader-mvp.xguardianplatform.io/create_app' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{
            "token": "${{ env.XGUARDIAN_TOKEN }}",
            "app_name": "${{ env.APP_NAME }}",
            "team_id": ${{ env.TEAM_ID }},
            "languages": ["${{ env.LANGUAGES }}"],
            "description": "${{ env.DESCRIPTION }}"
          }' | jq -r '.app_id')
          echo "XGUARDIAN_APP_ID=$APP_ID" >> $GITHUB_ENV

      - name: Generate Upload URL
        run: |
          URL=$(curl -sS -X POST 'https://uploader-mvp.xguardianplatform.io/upload-url' -H 'accept: application/json' -H 'Content-Type: application/json' -d '{
            "token": "${{ env.XGUARDIAN_TOKEN }}",
            "app_id": ${{ env.XGUARDIAN_APP_ID }},
            "scan_version": "${{ env.SCAN_VERSION }}",
            "file_type": "${{ env.FILE_TYPE }}"
          }' | jq -r '.url')
          echo "XGUARDIAN_UPLOAD_URL=$URL" >> $GITHUB_ENV

      - name: Clone repository
        run: git clone https://github.com/WebGoat/WebGoat

      - name: Zip files
        run: |
          cd WebGoat
          zip -r webgoat.zip .
          find . -type f ! -name 'webgoat.zip' -exec rm -rf {} +

      - name: Upload application for scan
        run: |
          FILE_PATH="./WebGoat/webgoat.zip"
          curl --progress-bar --location --request PUT "${{ env.XGUARDIAN_UPLOAD_URL }}" \
            --header 'Content-Type: application/zip' \
            --data-binary "@${FILE_PATH}"
